version: "3.8"

services:
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    env_file: .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - carbon-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 3s
      retries: 5

  redis:
    image: redis:alpine
    restart: unless-stopped
    volumes:
      - redis-data:/data
    networks:
      - carbon-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  carbon:
    build: .
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "${CARBON_PORT}:3000"
    env_file: .env
    environment:
      DATABASE_URL: "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}"
      REDIS_URL: "redis://redis:6379"
      NODE_ENV: production
    networks:
      - carbon-net
    command: ["/wait-for.sh", "postgres", "npm", "start"]
    volumes:
      - ./wait-for.sh:/wait-for.sh
      - /opt/carbon/app:/app

  pg-backup:
    image: postgres:15-alpine
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    env_file: .env
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./backup-postgres.sh:/backup-postgres.sh
      - ./backups:/backups
    entrypoint: >
      sh -c "apk add --no-cache gzip &&
             while true; do
               /backup-postgres.sh;
               sleep 86400;
             done"
    networks:
      - carbon-net

volumes:
  pgdata:
  redis-data:

networks:
  carbon-net:
